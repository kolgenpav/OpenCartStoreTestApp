package org.example;

// Generated by Selenium IDE

import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;

import java.time.Duration;
import java.util.List;
import java.util.Map;

/**
 * Prepare a test method with the following scenario.
 * <p>
 * 1. Go to https://demo.opencart.com/
 * 2. Select currency Euro.
 * 3. Click on the Desktops and Mac menu.
 * 4. Please check whether the product "iMac" at the price of 111.55 euros
 * is present on the page.
 * <p>
 * There are 3 test: with CSS, with XPath and with Combined locators.
 * The iMacPriceVerifyByCombinedLocators() is optimal.
 * <p>
 * You can test with Chrome or Firefox browser - choose in setClass() method
 *
 * @author Hennadii Kolomoiets
 */
public class IMacPriceVerifyTest {

    public static final Long IMPLICITLY_WAIT_SECONDS = 10L;
    private static WebDriver driver;
    private static Map<String, Object> vars;
    static JavascriptExecutor js;

    @BeforeAll
    public static void setClass() {
        WebDriverManager.chromedriver().setup();
        //Uncomment for Firefox
//        WebDriverManager.firefoxdriver().setup();
        //Comment 3 operators for Firefox
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--remote-allow-origins=*");
        driver = new ChromeDriver(options);
        //Uncomment for Firefox
//        driver = new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(IMPLICITLY_WAIT_SECONDS));
        driver.manage().window().maximize();
    }

    @AfterAll
    public static void tearDownClass() {
        if (driver != null) {
            driver.quit(); // close()
        }
    }

    @BeforeEach
    public void setUp() {
        // Open site
        driver.get("https://demo.opencart.com/");
    }

    @DisplayName("iMac price verifying with combined locators")
    @Test
    public void iMacPriceVerifyByCombinedLocators() {
        // Click on Currency select - unchangeable - can be located by css
        driver.findElement(By.cssSelector("#form-currency > div > a > span")).click();
        // Click on Euro item - may be problems if Euro changes position - use custom method
        getElementByName("€", "#form-currency > div > ul > * > a").click();
        // Click on Desktops menu item - unlikely changeable - can be located by css
        driver.findElement(By.cssSelector("#narbar-menu > ul > li:nth-child(1) > a")).click();
        // Click on iMac menu item - may be problems if Mac changes position - use custom method
        getElementByName("Mac", ".nav-item:nth-child(1) li > a").click();
        // Verify iMac price
        WebElement iMac = driver.findElement(By.partialLinkText("iMac"));
        //Use XPath because we need return to parents
        String iMacPrice = iMac.findElement(By.xpath("//../../div/span[1]")).getText();
        String expectedIMacPrice = "111.55€";
        Assertions.assertEquals(expectedIMacPrice, iMacPrice);
    }

    /**
     * Search WebElement by text part enclosed.
     *
     * @param name       template to search
     * @param cssLocator locator of the searched WebElement
     * @return WebElement
     */
    private WebElement getElementByName(String name, String cssLocator) {
        WebElement result = null;
        List<WebElement> containers = driver.findElements(By.cssSelector(cssLocator));
        for (WebElement current : containers) {
            if (current.getText().contains(name)) {
                result = current;
                break;
            }
        }
        if (result == null) {
            // Develop Custom Exception
            throw new RuntimeException("WebElement by title/name: " + name + " not found");
        }
        return result;
    }

    @DisplayName("iMac price verifying with CSS locators")
    @Test
    public void iMacPriceVerifyByCss() {
        // Click on Currency select - OK
        driver.findElement(By.cssSelector("#form-currency > div > a > span")).click();
        // Click on Euro item - May be problems if Euro changes position!!!
        driver.findElement(By.cssSelector("#form-currency > div > ul > li:nth-child(1) > a")).click();
        // Click on Desktops menu item - unlikely changeable - OK
        driver.findElement(By.cssSelector("#narbar-menu > ul > li:nth-child(1) > a")).click();
        // Click on iMac menu item - May be problems, when add product types to the list!!!
        driver.findElement(By.cssSelector(".nav-item:nth-child(1) li:nth-child(2) > .nav-link")).click();
        // Verify iMac price - May be problems, when there are more than one item!!!
        String iMacPrice = driver.findElement(By.cssSelector(".price-new")).getText();
        String expectedIMacPrice = "111.55€";
        Assertions.assertEquals(expectedIMacPrice, iMacPrice);
    }

    /**
     * Verifying iMac price with XPath locators.
     */
    @DisplayName("iMac price verifying with XPath locators")
    @Test
    public void iMacPriceVerifyByXPath() {
        // Click on Currency select - OK
        driver.findElement(By.xpath("//form[@id='form-currency']/div/a/i")).click();
        // Click on Euro item - May be problems if Euro changes position!!!
        driver.findElement(By.xpath("//form[@id='form-currency']/div/ul/li/a")).click();
        // Click on Desktops menu item - unlikely changeable - OK
        driver.findElement(By.xpath("//div[@id='narbar-menu']/ul/li/a")).click();
        // Click on iMac menu item - May be problems, when add product types to the list!!!
        driver.findElement(By.xpath("//*[@id=\"narbar-menu\"]/ul/li[1]/div/div/ul/li[2]/a")).click();
        // Verify iMac price - May be problems, when there are more than one item!!!
        String iMacPrice = driver.findElement(By.xpath("//span[contains(.,'111.55€')]")).getText();
        String expectedIMacPrice = "111.55€";
        Assertions.assertEquals(expectedIMacPrice, iMacPrice);
    }
}
